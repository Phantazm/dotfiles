# Layout variables
snippet layout
	<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<?php echo $html->charset(); ?>
		<title>
			<?php __('${1:Title}'); ?>
			<?php echo $title_for_layout; ?>
		</title>
		<?php
			echo $html->meta('icon');
			echo $html->css('cake.generic');
			echo $scripts_for_layout;
		?>
	</head>
	<body>
		<div id="container">
			<div id="header">
				<h1>$1</h1>
			</div>
			<div id="content">
				<?php 
					echo $this->Session->flash();
					echo $content_for_layout;
				?>
			</div>
			<div id="footer">
				
			</div>
		</div>
		<?php echo $this->element('sql_dump'); ?>
	</body>
	</html>

snippet box
	<div class='height_${1:170} grid_${2:12} ${3:alpha omega }box'>
		<div>${4:Header}</div>
		<div id='${5:unique-id}'>
		<?php
			${6}
		?>
		</div>
	</div>

snippet tab
	<div class='height_${1:170} grid_${2:12} ${3:alpha omega }tabs'>
		<ul>
			<li><a href='${4:tab-1}'>${5:Tab 1 Title}</a></li>
			<li><a href='${6:tab-2}'>${7:Tab 2 Title}</a></li>
		</ul>
		<div id='$4'${8: class='no-padding'}>
		<?php
			${9}
		?>
		</div>
		<div id='$6'>
		<?php
			
		?>
		</div>
	</div>

# Form helper
snippet form
	$form->create('${1:Model}');

snippet end
	$form->end(${1});

snippet date
	$form->dateTime('${1:Model}.${2:field}');

snippet day
	$form->day('${1:Model}.${2:field}');

snippet err
	$form->error('${1:Model}.${2:field}');

snippet file
	$form->file('${1:Model}.${2:field}');

snippet hid
	$form->hidden('${1:Model}.${2:field}');

snippet hour
	$form->hour('${1:Model}.${2:field}');

snippet in
	$form->input('${1:Model}.${2:field}');

snippet label
	$form->label('${1:Model}.${2:field}');

snippet merid
	$form->meridian('${1:Model}.${2:field}');

snippet min
	$form->minute('${1:Model}.${2:field}');

snippet month
	$form->month('${1:Model}.${2:field}');

snippet pass
	$form->password('${1:Model}.${2:field}');

snippet radio
	$form->radio('${1:Model}.${2:field}');

snippet select
	$form->select('${1:Model}.${2:field}');

snippet submit
	$form->submit('${1:Submit}'});

snippet text
	$form->text('${1:Model}.${2:field}');

snippet textarea
	$form->textarea('${1:Model}.${2:field}');

snippet year
	$form->year('${1:Model}.${2:field}');

# HTML helper
snippet char
	$html->charset(${1});

snippet css
	$html->css(array('${1:filename}'));

snippet div
	<div ${1}class='${2:class}'>
		${3}
	</div>

snippet doc
	$html->doctype('${1:xhtml-strict}');

snippet img
	$html->image('${1:image.ext}', array('alt'=>'${2:altText}'));

snippet imgl
	$html->link(
		$html->image('${1:image.ext}', array('alt' => '${2:altText}')),
		${3:array('controller' => '${4:controller}', 'action' => '${5:action}'),
		${6:null}, ${7:null}, ${8:false}
	);

snippet link
	$html->link('${1:text}', ${2:array('controller' => '${3:controller}', 'action' => '${4:action}'));

snippet metatom
	$html->meta('atom', '${1:atom.xml}');

snippet metadesc
	$html->meta('description', '${1:your description here}');

snippet metaicon
	$html->meta('icon', '${2:favicon.ico}');

snippet metakey
	$html->meta('keywords', '${1:your keywords here}');

snippet metarss
	$html->meta('rss', '${1:feed.rss}');

snippet meta
	$html->meta('${1:type}');

snippet script
	$html->script(array('${1:filename}'));

snippet style
	$html->style(${1});

# JavaScript helper
snippet jobj
	$javascript->object(${1:$data});

snippet jval
	$javascript->value(${1:$var});

snippet jesc
	$javascript->escapeString(${1:'string'});

# Controller
snippet control
	class ${1:Controller}Controller extends AppController {
	
		var $name = '$1';
	
		function index() {
			$this->${2:Model}->recursive = 0;
			$this->set('${3:controller}', $this->paginate());
		}
	
		function view($id = null) {
			if (!$id) {
				$this->Session->setFlash(__('Invalid $2.', true));
				$this->redirect(array('action'=>'index'));
			}
			$this->set('$3', $this->$2->read(null, $id));
		}
	
		function add() {
			if (!empty($this->data)) {
				$this->$2->create();
				if ($this->$2->save($this->data)) {
					$this->Session->setFlash(__('The $2 has been saved', true));
					$this->redirect(array('action'=>'index'));
				} else {
					$this->Session->setFlash(__('The $2 could not be saved. Please, try again.', true));
				}
			}
		}
	
		function edit($id = null) {
			if (!$id && empty($this->data)) {
				$this->Session->setFlash(__('Invalid $2', true));
				$this->redirect(array('action'=>'index'));
			}
			if (!empty($this->data)) {
				if ($this->$2->save($this->data)) {
					$this->Session->setFlash(__('The $2 has been saved', true));
					$this->redirect(array('action'=>'index'));
				} else {
					$this->Session->setFlash(__('The $2 could not be saved. Please, try again.', true));
				}
			}
			if (empty($this->data)) {
				$this->data = $this->$2->read(null, $id);
			}
		}
	
		function delete($id = null) {
			if (!$id) {
				$this->Session->setFlash(__('Invalid id for $2', true));
				$this->redirect(array('action'=>'index'));
			}
			if ($this->$2->del($id)) {
				$this->Session->setFlash(__('$2 deleted', true));
				$this->redirect(array('action'=>'index'));
			}
		}
	}

snippet dela
	$this->${1:ModelName}->deleteAll(${2:$conditions}${3: ,$cascade});

snippet id=
	$this->${1:ModelName}->id = ${2:$id};

snippet save
	$this->${1:ModelName}->save(${2:$this->data});

snippet savef
	$this->${1:ModelName}->saveField('${2:$field}', ${3:$fieldValue});

snippet upa
	$this->${1:ModelName}->updateAll(${2:$fields}${3: ,$conditions});

snippet find
	$this->${1:ModelName}->find('${2:all}'${3: ,$params});

snippet findby
	$this->${1:ModelName}->findBy${2:FieldName}(${3:$value});

snippet findallby
	$this->${1:ModelName}->findAllBy${2:FieldName}(${3:$value}));

snippet field
	$this->${1:ModelName}->field('${2:name}'}, ${3:'conditions'}, ${4:'order'});

# Paginator helper
snippet pcount
	$this->Paginator->counter();

snippet plink
	$this->Paginator->link('${1:title}', array());

snippet pnum
	$this->Paginator->numbers();

# Session component & helper
snippet scheck
	$this->Session->check('${1:Controller}.${2:key}');

snippet sdel
	$this->Session->delete('${1:Controller}.${2:key}');

snippet sdes
	$this->Session->destroy();

snippet serr
	$this->Session->error();

snippet sid
	$this->Session->id();

snippet sread
	$this->Session->read('${1:Controller}.${2:key}');

snippet sres
	$this->Session->restore();

snippet sflash
	$this->Session->setFlash('${1:message}'${2:, 'default'}${3:, $params});

snippet svalid
	$this->Session->valid();

snippet swrite
	$this->Session->write('${1:Controller}.${2:key}', '${3:value}');

snippet serrhelper
	$this->Session->error();

snippet sflashhelp
	$this->Session->flash(${1:'key'});

snippet sreadhelp
	$this->Session->read('${1:key}');

# Assert
snippet assertE
	$this->assertEqual(${1:$result}, ${2:$expected});

snippet assertF
	$this->assertFalse(${1:$result});

snippet assertP
	$this->assertPattern('${1}', ${2:$result});

snippet assertT
	$this->assertTrue(${1:$result});

# Misc
snippet data
	$${1:data}['${2:Model}']['${3:field}'];

snippet elem
	$this->element('${1:element}');

snippet ra 
	$this->requestAction(array('controller' => '${1:controller}', 'action' => '${2:action}'));

snippet de
	debug($${1:data});

snippet pr
	pr($${1:data});

snippet set 
	$this->set('${1:var}', $${2:});

snippet redref
	$this->redirect($this->referer(${1:'/'}));

snippet re
	$this->redirect(array('controller' => '${1:controller}', 'action' => '${2:action}'));

snippet ren
	$this->render(${1:'action'});

snippet app
	App::import('${1:LibraryName}'${2:, 'ClassName'});

snippet cr
	ClassRegistry::init('${1:ModelName}');

snippet configr
	Configure::read('${1}')

snippet configw
	Configure::write('${1}', ${2});

snippet after
	function afterFilter() {
		${1}
	}

snippet beforefil
	function beforeFilter() {
		${1}
	}

snippet beforeren
	function beforeRender() {
		${1}
	}

# Inflector
snippet infcam
	Inflector::camelize(${1:$word})

snippet infclass
	Inflector::classify(${1:$word})

snippet infhum
	Inflector::humanize(${1:$word})

snippet infplur
	Inflector::pluralize(${1:$word})

snippet infsing
	Inflector::singularize(${1:$word})

snippet infslug
	Inflector::slug(${1:$word})

snippet inftab
	Inflector::tabelize(${1:$word})

snippet infunder
	Inflector::underscore(${1:$word})

snippet infvar
	Inflector::variable(${1:$word})

snippet afterdelete
	function afterDelete() {
		${1}
	}

# Callback methods
snippet afterfind
	function afterFind(${1:$results}) {
		${2}
	}

snippet aftersave
	function afterSave(${1:$created}) {
		${2}
	}

snippet beforedelete
	function beforeDelete() {
		${1}
	}

snippet beforefind
	function beforeFind(${1:$queryData}) {
		${2}
	}

snippet beforesave
	function beforeSave() {
		${1}
	}

snippet beforevalidate
	function beforeValidate() {
		${1}
	}

snippet onerror
	function onError() {
		${1}
	}

snippet __
	__('${1}'${2:, true})${3:;}

snippet __h
	__('${1}'${2:, true}); 

# Model
snippet model
	class ${1:Model} extends AppModel {
		var $name = '$1';
	}

snippet act
	var $actsAs = array('${1:BehaviorName}'${2: => ConfigForBehavior});

snippet bt
	var $belongsTo = array('${1:Model}');

snippet habtm
	var $hasAndBelongsToMany = array('${1:Model}');

snippet hm
	var $hasMany = array('${1:Model}');

snippet ho
	var $hasOne = array('${1:Model}');
